<?php

namespace AiosInitialSetup\Config;

trait Generate{

  /**
   * Generate Default Pages
   *
   * @param $names
   */
  public function generateDefaultPages($names)
  {
    if (! empty($names)) {
      $response = wp_remote_get(
        plugin_dir_url(__FILE__) . 'forms.json',
        [
          'timeout' => 45,
          'blocking' => true,
          'cookies' => []
        ]
      );
      $json_data = json_decode($response['body'], true);
      $messages = $json_data['defaults'][0]['messages'];

      foreach ($names as $name) {
        if (isset($json_data['forms'][0][$name])) {
          $data = $json_data['forms'][0][$name][0];

          // Check if name is sitemap just generate a page
          // Else if generate exists on json
          if ($data['has_form']) {
            $data['mail']['recipient'] = get_bloginfo('admin_email');
            $isFormExists = $this->isFormExists(str_replace(['amante-ii-', 'iconic-', 'element-', 'legacy-'], ['ap-', 'ap-', 'ap-', 'ap-'], $name));

            // Check if form does exists override content
            if ($isFormExists) {
              $mailMeta = get_post_meta((int) $isFormExists, '_mail', true);

              $data['mail']['sender'] = $mailMeta['sender'];
              $data['mail']['recipient'] = $mailMeta['recipient'];
              $data['mail']['additional_headers'] = $mailMeta['additional_headers'];

              update_post_meta((int) $isFormExists, '_messages', $messages);
              update_post_meta((int) $isFormExists, '_mail', $data['mail']);
              update_post_meta((int) $isFormExists, '_form', $data['form']);
            } else {
              $formID = wp_insert_post([
                'post_title'    => $data['title'],
                'post_content'  => 'Auto Generated by Initial Setup',
                'post_type'     => 'wpcf7_contact_form',
                'post_status'   => 'publish',
                'post_author'   => 1
              ]);

              // If form successfully generated
              if ($formID) {
                update_post_meta($formID, '_messages', $messages);
                update_post_meta($formID, '_mail', $data['mail']);
                update_post_meta($formID, '_form', $data['form']);

                if ($data['default_page']) {
                  $pageContent = '<div class="aidefcf-wrapper aidefcf-wrapper-' . strtolower(str_replace(" ", "-", $data['title'])) . '"><p>' . $data['content'] . '</p> [contact-form-7 id="' . $formID . '" title="' . $data['title'] . '" html_class="use-floating-validation-tip"]</div>';
                } else {
                  $pageContent = str_replace('[contact-form-7]', '[contact-form-7 id="' . $formID . '" title="' . $data['title'] . '" html_class="use-floating-validation-tip"]', $data['content']);
                }

                $toInsertPage = [
                  'post_title'    => str_replace(' (Auto-generated by AIOS Initial Setup)', '', $data['title']),
                  'post_name' 	  => $data['slug'],
                  'post_content'  => $pageContent,
                  'post_type'     => 'page',
                  'post_status'   => 'publish',
                  'post_author'   => 1,
                  'page_template' => $data['page_template'] ?? 'default'
                ];

                if ($toInsertPage['post_title'] !== '404 Page Form') {
                  $this->updateOrCreate(get_page_by_path($toInsertPage['post_name'], OBJECT, 'page'), $toInsertPage);
                }
              }
            }
          } else {
            $this->updateOrCreate(
              get_page_by_path($data['slug'], OBJECT, 'page'),
              [
                'post_title' => str_replace(' (Auto-generated by AIOS Initial Setup)', '', $data['title']),
                'post_content' => $data['content'],
                'post_type' => 'page',
                'post_status' => 'publish',
                'post_author' => 1,
                'page_template' => $data['page_template'] ?? 'default'
              ]
            );
          }
        }

        // Save generated pages to option
        if (! is_null($data['slug'])) {
          $optionName = 'aios-generate-pages';
          $options = get_option($optionName, []);

          // If option does exists delete
          if (! empty($options)) {
            delete_option($optionName);
          }

          // Add to option
          $options[$data['slug']] = $name;
          add_option($optionName, $options);
        }
      }
    }
  }

  /**
   * Update or Create Post
   *
   * @param $post
   * @param $content
   */
  private function updateOrCreate($post, $content)
  {
    if ($post) {
      $content['ID'] = $post->ID;
      wp_update_post($content);
    } else {
      wp_insert_post($content);
    }
  }

  /**
   * Generate Bulk pages
   *
   * @param $pages
   * @param $page_content
   * @param $page_status
   * @param $page_parent
   * @param $page_template
   */
  public function generateBulkPages($pages, $page_content, $page_status, $page_parent, $page_template)
  {
    $pageTitles = explode("\n", $pages);

    foreach ($pageTitles as $pageTitle){
      if (trim($pageTitle) !== '') {
        $toInsert = [
          'post_title' => trim($pageTitle),
          'post_content' => $page_content,
          'post_type'	=> 'page',
          'post_status' => $page_status,
          'post_author' => 1,
          'post_parent' => $page_parent,
        ];

        if (! empty($page_template)) {
          $toInsert['page_template'] = $page_template;
        }

        wp_insert_post($toInsert);
      }
    }
  }

  /**
   * Check if contact form exists
   *
   * @param $name
   * @return bool|int
   */
  private function isFormExists($name)
  {
    wp_reset_query();
    wp_reset_postdata();

    $forms = [
      'post_type' => 'wpcf7_contact_form',
      'posts_per_page' => -1
    ];

    $form = '';

    switch ($name) {
      case 'what-is-my-home-worth': $form = 'What is My Home Worth? (Auto-generated by AIOS Initial Setup)'; break;
      case 'find-my-dream-home': $form = 'Find My Dream Home! (Auto-generated by AIOS Initial Setup)'; break;
      case 'help-me-relocate': $form = 'Help Me Relocate! (Auto-generated by AIOS Initial Setup)'; break;
      case 'contact': $form = 'Contact Us (Auto-generated by AIOS Initial Setup)'; break;
      case 'not-found': $form = '404 Page Form (Auto-generated by AIOS Initial Setup)'; break;
      case 'ap-about': $form = 'About (Auto-generated by AIOS Initial Setup)'; break;
      case 'ap-contact': $form = 'Contact (Auto-generated by AIOS Initial Setup)'; break;
    }

    $cf7_arr = get_posts($forms);
    wp_reset_query();

    $placeholder = [];

    if (! empty($cf7_arr)){
      foreach ($cf7_arr as $cf7_item ) {
        $placeholder[$cf7_item->post_title] = $cf7_item->post_title;
      }
    }

    return in_array($form, $placeholder) ? get_page_by_title($form, '', 'wpcf7_contact_form')->ID : false;
  }

  /**
   * Generate JSON by CID
   *
   * @param $cid
   * @param $types
   * @return string
   * @since 3.0.5
   *
   * @access public
   */
  public function generateIHFlists($cid, $types) {
    $fieldnames = array_filter(explode(',', $types));

    if ($types !== 'cityId,') {
      $types = str_replace('cityId', 'city', $types);
    }

    $output = '';
    $fieldname_count = 1;

    foreach ($fieldnames as $fieldname) {
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_URL, "http://www.idxhome.com/service/listing/areas/ajax/" . trim( $cid ) . "?fieldName=" . $fieldname . "&maxResults=0");
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      $areas = curl_exec($ch);
      $areas = json_decode( $areas );
      $area = [];
      $v = '';
      $count = 1;

      foreach ($areas as $area) {
        $separator = $count == 1 ? '' : ',';

        switch($area->fieldName) {
          case 'cityId':
            $remarks = 'City';
            break;

          case 'zip':
            $remarks = 'Zip Code';
            break;

          case 'mlsarea':
            $remarks = 'MLS Area';
            break;

          case 'neighborhood':
            $remarks = 'Neighborhood';
            break;

          default:
            $remarks = '';
            break;
        }

        $v .= $separator . '{ "remarks": "' . $remarks . '", "value": "' . $area->value . '", "text": "' . $area->label . '", "type": "' . $area->fieldName . '[]"}' ;
        $count++;
      }

      $fieldname_separator = $fieldname_count == 1 ? '' : ',';

      if (! empty($v)) {
        $output .= $fieldname_separator . $v;
        $fieldname_count++;
      }
    }

    return '{"' . str_replace(',', '', strtolower($types)) . '":[' .  $output . ']}';
  }
}
